# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET           /                                      controllers.QueryController.index

# Map static resources from the /public folder to the /assets URL path
GET           /assets/*file                          controllers.Assets.versioned(path="/public", file: Asset)

# Home page
GET           /get/Month/:m/:uid                     controllers.QueryController.byMonth(m: Integer, uid: Integer)
GET           /get/Quarter/:m/:uid                   controllers.QueryController.byQuarter(m: Integer, uid: Integer)
GET           /get/Category/:m/:uid                  controllers.QueryController.byCategory(m: Integer, uid: Integer)
GET           /get/Email/:email                      controllers.QueryController.byEmail(email: String)
GET           /get/Username/:username                controllers.QueryController.byUsername(username: String)
GET           /get/Years/:uid                        controllers.QueryController.byYears(uid: Integer)

GET           /valid/User/:userid/:pwd               controllers.QueryController.validateUser(userid: String, pwd: String)

# create objects
POST          /add/User                              controllers.QueryController.addUser
POST          /add/Member/:userid                    controllers.QueryController.addMember(userid: Long)
POST          /add/Contact/:userid                   controllers.QueryController.addContact(userid: Long)
POST          /add/Xaction/:userid/:contactid        controllers.QueryController.addTransaction(userid: Long, contactid: Long)

# find entities
GET           /get/User                              controllers.QueryController.getUser(id: Long = 0)
GET           /get/User/:id                          controllers.QueryController.getUser(id: Long)
GET           /get/Contact                           controllers.QueryController.getContact(id: Long = 0)
GET           /get/Contact/:id                       controllers.QueryController.getContact(id: Long)
GET           /get/Member                            controllers.QueryController.getMember(id: Long = 0)
GET           /get/Member/:id                        controllers.QueryController.getMember(id: Long)
GET           /get/Xaction                           controllers.QueryController.getTransactions(id: Long = 0)
GET           /get/Xaction/:id                       controllers.QueryController.getTransactions(id: Long)

# update existing objects
POST          /update/User/:userid                   controllers.QueryController.updateUser(userid: Long)
POST          /update/Member/:memberid               controllers.QueryController.updateMember(memberid: Long)
POST          /update/Contact/:contactid             controllers.QueryController.updateContact(contactid: Long)
POST          /update/Xaction/:xactid                controllers.QueryController.updateTransaction(xactid: Long)
POST          /uploadFile                            controllers.UploadController.uploadFile

# drop existing objects
DELETE        /drop/User/:userid                     controllers.QueryController.dropUser(userid: Long)
DELETE        /drop/Member/:memberid                 controllers.QueryController.dropMember(memberid: Long)
DELETE        /drop/Contact/:contactid               controllers.QueryController.dropContact(contactid: Long)
DELETE        /drop/Xaction/:xactid                  controllers.QueryController.dropTransaction(xactid: Long)

# memcached ops
GET           /mem/add/:k/:v                         controllers.QueryController.memadd(k: String, v: String)
GET           /mem/set/:k/:v                         controllers.QueryController.memset(k: String, v: String)
GET           /mem/get/:k                            controllers.QueryController.memget(k: String)
GET           /mem/del/:k                            controllers.QueryController.memdrop(k: String)